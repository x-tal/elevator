
Elavator_test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000dc4  00000e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080011a  0080011a  00000e72  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002f5  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ef8  00000000  00000000  000018da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000181  00000000  00000000  000027d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001006  00000000  00000000  00002953  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  0000395c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000326  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000ff  00000000  00000000  00003e12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 33       	cpi	r26, 0x32	; 50
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 14 06 	call	0xc28	; 0xc28 <main>
  c6:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Set>:

void Set(void)
{
	DDRA = 0b11111111; // LCD_Data_bit
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111; // switch LED
  d2:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b00000000; // Switch
  d4:	14 ba       	out	0x14, r1	; 20
	DDRD = 0b11111111; // floor_LED
  d6:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b11111111; // LCD_Control_bit    
  d8:	82 b9       	out	0x02, r24	; 2
	PORTB=0b11111100; //12345600  0이면 켜짐 1이면 꺼짐 
  da:	8c ef       	ldi	r24, 0xFC	; 252
  dc:	88 bb       	out	0x18, r24	; 24
	PORTD=0b00111111; //00654321
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	82 bb       	out	0x12, r24	; 18
}
  e2:	08 95       	ret

000000e4 <Switch>:
volatile unsigned int Count;

//스위치 함수
void Switch(void)
{
	pinc1 = PINC & 0b00000001; // 1번 스위치가 눌렸을때 
  e4:	83 b3       	in	r24, 0x13	; 19
  e6:	81 70       	andi	r24, 0x01	; 1
  e8:	80 93 2f 01 	sts	0x012F, r24
	pinc2 = PINC & 0b00000010; // 2번 스위치가 눌렸을때
  ec:	83 b3       	in	r24, 0x13	; 19
  ee:	82 70       	andi	r24, 0x02	; 2
  f0:	80 93 20 01 	sts	0x0120, r24
	pinc3 = PINC & 0b00000100; // 3번 스위치가 눌렸을때
  f4:	83 b3       	in	r24, 0x13	; 19
  f6:	84 70       	andi	r24, 0x04	; 4
  f8:	80 93 23 01 	sts	0x0123, r24
	pinc4 = PINC & 0b00001000; // 4번 스위치가 눌렸을때
  fc:	83 b3       	in	r24, 0x13	; 19
  fe:	88 70       	andi	r24, 0x08	; 8
 100:	80 93 29 01 	sts	0x0129, r24
	pinc5 = PINC & 0b00010000; // 5번 스위치가 눌렸을때
 104:	83 b3       	in	r24, 0x13	; 19
 106:	80 71       	andi	r24, 0x10	; 16
 108:	80 93 2e 01 	sts	0x012E, r24
	pinc6 = PINC & 0b00100000; // 6번 스위치가 눌렸을때
 10c:	83 b3       	in	r24, 0x13	; 19
 10e:	80 72       	andi	r24, 0x20	; 32
 110:	80 93 28 01 	sts	0x0128, r24
			Data_6=0;
			time1=0;
		}
	*/

		if(pinc1==0)
 114:	80 91 2f 01 	lds	r24, 0x012F
 118:	88 23       	and	r24, r24
 11a:	51 f4       	brne	.+20     	; 0x130 <Switch+0x4c>
		{
			 Data_1 = 4;
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 31 01 	sts	0x0131, r25
 124:	80 93 30 01 	sts	0x0130, r24
			 Count==1;
 128:	80 91 26 01 	lds	r24, 0x0126
 12c:	90 91 27 01 	lds	r25, 0x0127
		}
	

		if(pinc2==0)
 130:	80 91 20 01 	lds	r24, 0x0120
 134:	88 23       	and	r24, r24
 136:	51 f4       	brne	.+20     	; 0x14c <Switch+0x68>
		{
			 Data_2 = 8;
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 2b 01 	sts	0x012B, r25
 140:	80 93 2a 01 	sts	0x012A, r24
			 Count==2;
 144:	80 91 26 01 	lds	r24, 0x0126
 148:	90 91 27 01 	lds	r25, 0x0127
		}
		
		if(pinc3==0)
 14c:	80 91 23 01 	lds	r24, 0x0123
 150:	88 23       	and	r24, r24
 152:	51 f4       	brne	.+20     	; 0x168 <Switch+0x84>
		{
			 Data_3 = 16;
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 1f 01 	sts	0x011F, r25
 15c:	80 93 1e 01 	sts	0x011E, r24
			 Count==3;
 160:	80 91 26 01 	lds	r24, 0x0126
 164:	90 91 27 01 	lds	r25, 0x0127
		}
		
		if(pinc4==0)
 168:	80 91 29 01 	lds	r24, 0x0129
 16c:	88 23       	and	r24, r24
 16e:	51 f4       	brne	.+20     	; 0x184 <Switch+0xa0>
		{
			 Data_4 = 32;
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 2d 01 	sts	0x012D, r25
 178:	80 93 2c 01 	sts	0x012C, r24
			 Count==4;
 17c:	80 91 26 01 	lds	r24, 0x0126
 180:	90 91 27 01 	lds	r25, 0x0127
		}
		
		if(pinc5==0)
 184:	80 91 2e 01 	lds	r24, 0x012E
 188:	88 23       	and	r24, r24
 18a:	51 f4       	brne	.+20     	; 0x1a0 <Switch+0xbc>
		{
			 Data_5 = 64;
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 22 01 	sts	0x0122, r25
 194:	80 93 21 01 	sts	0x0121, r24
			 Count==5;
 198:	80 91 26 01 	lds	r24, 0x0126
 19c:	90 91 27 01 	lds	r25, 0x0127
		}
		
		
		if(pinc6==0)
 1a0:	80 91 28 01 	lds	r24, 0x0128
 1a4:	88 23       	and	r24, r24
 1a6:	51 f4       	brne	.+20     	; 0x1bc <Switch+0xd8>
		{
			 Data_6 = 128;
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 25 01 	sts	0x0125, r25
 1b0:	80 93 24 01 	sts	0x0124, r24
			 Count==6;
 1b4:	80 91 26 01 	lds	r24, 0x0126
 1b8:	90 91 27 01 	lds	r25, 0x0127
		}
				
		 PORTB = 0b11111111- Data_1 - Data_2 - Data_3 - Data_4 - Data_5 - Data_6; // 스위치 동시제어 
 1bc:	e0 91 30 01 	lds	r30, 0x0130
 1c0:	f0 91 31 01 	lds	r31, 0x0131
 1c4:	60 91 2a 01 	lds	r22, 0x012A
 1c8:	70 91 2b 01 	lds	r23, 0x012B
 1cc:	40 91 1e 01 	lds	r20, 0x011E
 1d0:	50 91 1f 01 	lds	r21, 0x011F
 1d4:	20 91 2c 01 	lds	r18, 0x012C
 1d8:	30 91 2d 01 	lds	r19, 0x012D
 1dc:	80 91 21 01 	lds	r24, 0x0121
 1e0:	90 91 22 01 	lds	r25, 0x0122
 1e4:	a0 91 24 01 	lds	r26, 0x0124
 1e8:	b0 91 25 01 	lds	r27, 0x0125
 1ec:	98 2f       	mov	r25, r24
 1ee:	90 95       	com	r25
 1f0:	9a 1b       	sub	r25, r26
 1f2:	8e 2f       	mov	r24, r30
 1f4:	81 95       	neg	r24
 1f6:	86 1b       	sub	r24, r22
 1f8:	84 1b       	sub	r24, r20
 1fa:	82 1b       	sub	r24, r18
 1fc:	98 0f       	add	r25, r24
 1fe:	98 bb       	out	0x18, r25	; 24
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
 200:	83 e5       	ldi	r24, 0x53	; 83
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <Switch+0x11e>
 206:	00 00       	nop
		_delay_ms(1); // ~밝기 조절
						
}
 208:	08 95       	ret

0000020a <LCD_data>:
 20a:	e0 e7       	ldi	r30, 0x70	; 112
 20c:	f2 e0       	ldi	r31, 0x02	; 2
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_data+0x4>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_data+0xa>
 214:	00 00       	nop
}
// LCD_설정
void LCD_data(unsigned char Data)
{
    _delay_ms(10);
    PORTE = 0b10000000; //RS set. RW clear. E clear.
 216:	90 e8       	ldi	r25, 0x80	; 128
 218:	93 b9       	out	0x03, r25	; 3
    _delay_us(0.05); //RW & RS Setup time is 40ns min.
    PORTE = 0b10001000; // E set.
 21a:	98 e8       	ldi	r25, 0x88	; 136
 21c:	93 b9       	out	0x03, r25	; 3
    _delay_us(0.1); //Data Setup time is 80ns min.
    PORTA = Data; // Data input.
 21e:	8b bb       	out	0x1b, r24	; 27
    _delay_us(0.5); // valid data min is 130ns.
    PORTE = 0b00100000; // RS clear. RW set. E clear.
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	83 b9       	out	0x03, r24	; 3
}
 224:	08 95       	ret

00000226 <LCD_controller>:
 226:	e6 e1       	ldi	r30, 0x16	; 22
 228:	f1 e1       	ldi	r31, 0x11	; 17
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_controller+0x4>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_controller+0xa>
 230:	00 00       	nop
// LCD_설정
void LCD_controller(unsigned char control)
{
    _delay_ms(70);
    PORTE = 0x00; //RW clear.
 232:	13 b8       	out	0x03, r1	; 3
    _delay_us(0.05); //RW & RS Setup time is 40ns min.
    PORTE = 0b00001000; // E set.
 234:	98 e0       	ldi	r25, 0x08	; 8
 236:	93 b9       	out	0x03, r25	; 3
    _delay_us(0.1); //Data Setup time is 80ns min.
    PORTA = control; // Data input.
 238:	8b bb       	out	0x1b, r24	; 27
    _delay_us(0.3); // valid data is 130ns min.
    PORTE = 0b10100000; // RS set. RW set. E clear.
 23a:	80 ea       	ldi	r24, 0xA0	; 160
 23c:	83 b9       	out	0x03, r24	; 3
}
 23e:	08 95       	ret

00000240 <LCD_string>:
    PORTE = 0b00100000; // RS clear. RW set. E clear.
}

// LCD_data보내기 
void LCD_string(unsigned char address, unsigned char *Str)
{
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	18 2f       	mov	r17, r24
 24e:	7b 01       	movw	r14, r22
    int i=0;
    LCD_controller(address); // LCD display start position
 250:	0e 94 13 01 	call	0x226	; 0x226 <LCD_controller>
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	d0 e0       	ldi	r29, 0x00	; 0
    while(*Str != '\0')
    {
        if(address+i == 0x90)
 258:	01 2f       	mov	r16, r17
 25a:	10 e0       	ldi	r17, 0x00	; 0
// LCD_data보내기 
void LCD_string(unsigned char address, unsigned char *Str)
{
    int i=0;
    LCD_controller(address); // LCD display start position
    while(*Str != '\0')
 25c:	0f c0       	rjmp	.+30     	; 0x27c <LCD_string+0x3c>
    {
        if(address+i == 0x90)
 25e:	ce 01       	movw	r24, r28
 260:	80 0f       	add	r24, r16
 262:	91 1f       	adc	r25, r17
 264:	80 39       	cpi	r24, 0x90	; 144
 266:	91 05       	cpc	r25, r1
 268:	19 f4       	brne	.+6      	; 0x270 <LCD_string+0x30>
            LCD_controller(0xc0); // second line display
 26a:	80 ec       	ldi	r24, 0xC0	; 192
 26c:	0e 94 13 01 	call	0x226	; 0x226 <LCD_controller>
        LCD_data(*Str);
 270:	f7 01       	movw	r30, r14
 272:	81 91       	ld	r24, Z+
 274:	7f 01       	movw	r14, r30
 276:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_data>
        i++;
 27a:	21 96       	adiw	r28, 0x01	; 1
// LCD_data보내기 
void LCD_string(unsigned char address, unsigned char *Str)
{
    int i=0;
    LCD_controller(address); // LCD display start position
    while(*Str != '\0')
 27c:	f7 01       	movw	r30, r14
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	69 f7       	brne	.-38     	; 0x25e <LCD_string+0x1e>
            LCD_controller(0xc0); // second line display
        LCD_data(*Str);
        i++;
        Str++;
    }
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	08 95       	ret

00000292 <LCD_initialize>:
 292:	84 e3       	ldi	r24, 0x34	; 52
 294:	9c e0       	ldi	r25, 0x0C	; 12
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_initialize+0x4>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_initialize+0xa>
 29c:	00 00       	nop
// LCD 초기화 & 모드 설정
void LCD_initialize(void)
{
    /* 8bit interface mode */
    _delay_ms(50);
    LCD_controller(0x3c); // Function set. Use 2-line, display on.
 29e:	8c e3       	ldi	r24, 0x3C	; 60
 2a0:	0e 94 13 01 	call	0x226	; 0x226 <LCD_controller>
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
 2a4:	94 e0       	ldi	r25, 0x04	; 4
 2a6:	9a 95       	dec	r25
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_initialize+0x14>
 2aa:	00 00       	nop
    _delay_us(40); // wait for more than 39us.
    LCD_controller(0b00001100); // Display ON/OFF Control. display,cursor,blink on
 2ac:	8c e0       	ldi	r24, 0x0C	; 12
 2ae:	0e 94 13 01 	call	0x226	; 0x226 <LCD_controller>
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_initialize+0x22>
 2b8:	00 00       	nop
    _delay_us(40); // wait for more than 39us.
    LCD_controller(0x01); // Display Clear.
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 13 01 	call	0x226	; 0x226 <LCD_controller>
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
#if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__)
	extern void __builtin_avr_delay_cycles(unsigned long);
	__builtin_avr_delay_cycles(__tmp);
 2c0:	9f e7       	ldi	r25, 0x7F	; 127
 2c2:	9a 95       	dec	r25
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_initialize+0x30>
 2c6:	00 00       	nop
    _delay_ms(1.53); // wait for more than 1.53ms.
    LCD_controller(0x06); // Entry Mode Set. I/D increment mode, entire shift off
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	0e 94 13 01 	call	0x226	; 0x226 <LCD_controller>
}
 2ce:	08 95       	ret

000002d0 <LCD_Floor_stay_3>:
	LCD_string(0x87, "|2|"); // Start address is 0x80(0,0)
	_delay_ms(40000);
}
void LCD_Floor_stay_3(void)
{	
	LCD_string(0x87, "|3|"); // Start address is 0x80(0,0)
 2d0:	87 e8       	ldi	r24, 0x87	; 135
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	71 e0       	ldi	r23, 0x01	; 1
 2d6:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 2da:	8f e7       	ldi	r24, 0x7F	; 127
 2dc:	94 e8       	ldi	r25, 0x84	; 132
 2de:	ae e1       	ldi	r26, 0x1E	; 30
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	a0 40       	sbci	r26, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <LCD_Floor_stay_3+0x10>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_Floor_stay_3+0x1a>
 2ea:	00 00       	nop
	_delay_ms(40000);
}
 2ec:	08 95       	ret

000002ee <LCD_Floor_stay_2>:
	LCD_string(0x87, "|1|"); // Start address is 0x80(0,0)
	_delay_ms(40000);
}
void LCD_Floor_stay_2(void)
{	
	LCD_string(0x87, "|2|"); // Start address is 0x80(0,0)
 2ee:	87 e8       	ldi	r24, 0x87	; 135
 2f0:	64 e0       	ldi	r22, 0x04	; 4
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 2f8:	8f e7       	ldi	r24, 0x7F	; 127
 2fa:	94 e8       	ldi	r25, 0x84	; 132
 2fc:	ae e1       	ldi	r26, 0x1E	; 30
 2fe:	81 50       	subi	r24, 0x01	; 1
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	a0 40       	sbci	r26, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <LCD_Floor_stay_2+0x10>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_Floor_stay_2+0x1a>
 308:	00 00       	nop
	_delay_ms(40000);
}
 30a:	08 95       	ret

0000030c <LCD_Floor_stay_1>:
	LCD_string(0x87, "|B1|"); // Start address is 0x80(0,0)
	_delay_ms(40000);
}
void LCD_Floor_stay_1(void)
{	
	LCD_string(0x87, "|1|"); // Start address is 0x80(0,0)
 30c:	87 e8       	ldi	r24, 0x87	; 135
 30e:	68 e0       	ldi	r22, 0x08	; 8
 310:	71 e0       	ldi	r23, 0x01	; 1
 312:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 316:	8f e7       	ldi	r24, 0x7F	; 127
 318:	94 e8       	ldi	r25, 0x84	; 132
 31a:	ae e1       	ldi	r26, 0x1E	; 30
 31c:	81 50       	subi	r24, 0x01	; 1
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	a0 40       	sbci	r26, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <LCD_Floor_stay_1+0x10>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_Floor_stay_1+0x1a>
 326:	00 00       	nop
	_delay_ms(40000);
}
 328:	08 95       	ret

0000032a <LCD_Floor_stay_B1>:



void LCD_Floor_stay_B1(void)
{	
	LCD_string(0x87, "|B1|"); // Start address is 0x80(0,0)
 32a:	87 e8       	ldi	r24, 0x87	; 135
 32c:	6c e0       	ldi	r22, 0x0C	; 12
 32e:	71 e0       	ldi	r23, 0x01	; 1
 330:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 334:	8f e7       	ldi	r24, 0x7F	; 127
 336:	94 e8       	ldi	r25, 0x84	; 132
 338:	ae e1       	ldi	r26, 0x1E	; 30
 33a:	81 50       	subi	r24, 0x01	; 1
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	a0 40       	sbci	r26, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <LCD_Floor_stay_B1+0x10>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_Floor_stay_B1+0x1a>
 344:	00 00       	nop
	_delay_ms(40000);
}
 346:	08 95       	ret

00000348 <LCD_Floor_shift_middle_3>:
	 	}	
}

// 3층 shift로 표시
void LCD_Floor_shift_middle_3(void)
{
 348:	1f 93       	push	r17
 34a:	17 e8       	ldi	r17, 0x87	; 135

		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x87+shift, "3"); // Start address is 0x80(0,0)
 34c:	81 2f       	mov	r24, r17
 34e:	61 e1       	ldi	r22, 0x11	; 17
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9d e0       	ldi	r25, 0x0D	; 13
 35a:	a3 e0       	ldi	r26, 0x03	; 3
 35c:	81 50       	subi	r24, 0x01	; 1
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	a0 40       	sbci	r26, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <LCD_Floor_shift_middle_3+0x14>
 364:	00 c0       	rjmp	.+0      	; 0x366 <LCD_Floor_shift_middle_3+0x1e>
 366:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화
 368:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();			
 36c:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 370:	1f 5f       	subi	r17, 0xFF	; 255
// 3층 shift로 표시
void LCD_Floor_shift_middle_3(void)
{

		int shift = 0;
		for(shift = 0; shift<8; shift++)
 372:	1f 38       	cpi	r17, 0x8F	; 143
 374:	59 f7       	brne	.-42     	; 0x34c <LCD_Floor_shift_middle_3+0x4>
			_delay_ms(4000);
			LCD_initialize(); // 초기화
			Switch();			
	 	}	

}
 376:	1f 91       	pop	r17
 378:	08 95       	ret

0000037a <LCD_Floor_shift_middle_2>:
	 	}	
}

// 2층 shift로 표시
void LCD_Floor_shift_middle_2(void)
{
 37a:	1f 93       	push	r17
 37c:	17 e8       	ldi	r17, 0x87	; 135

		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x87+shift, "2"); // Start address is 0x80(0,0)
 37e:	81 2f       	mov	r24, r17
 380:	63 e1       	ldi	r22, 0x13	; 19
 382:	71 e0       	ldi	r23, 0x01	; 1
 384:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 388:	8f e3       	ldi	r24, 0x3F	; 63
 38a:	9d e0       	ldi	r25, 0x0D	; 13
 38c:	a3 e0       	ldi	r26, 0x03	; 3
 38e:	81 50       	subi	r24, 0x01	; 1
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	a0 40       	sbci	r26, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <LCD_Floor_shift_middle_2+0x14>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_Floor_shift_middle_2+0x1e>
 398:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화
 39a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();			
 39e:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 3a2:	1f 5f       	subi	r17, 0xFF	; 255
// 2층 shift로 표시
void LCD_Floor_shift_middle_2(void)
{

		int shift = 0;
		for(shift = 0; shift<8; shift++)
 3a4:	1f 38       	cpi	r17, 0x8F	; 143
 3a6:	59 f7       	brne	.-42     	; 0x37e <LCD_Floor_shift_middle_2+0x4>
			LCD_string(0x87+shift, "2"); // Start address is 0x80(0,0)
			_delay_ms(4000);
			LCD_initialize(); // 초기화
			Switch();			
	 	}	
}
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <LCD_Floor_shift_middle_1>:
	 	}	
}

// 1층 shift로 표시
void LCD_Floor_shift_middle_1(void)
{
 3ac:	1f 93       	push	r17
 3ae:	17 e8       	ldi	r17, 0x87	; 135
		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x87+shift, "1"); // Start address is 0x80(0,0)
 3b0:	81 2f       	mov	r24, r17
 3b2:	65 e1       	ldi	r22, 0x15	; 21
 3b4:	71 e0       	ldi	r23, 0x01	; 1
 3b6:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 3ba:	8f e3       	ldi	r24, 0x3F	; 63
 3bc:	9d e0       	ldi	r25, 0x0D	; 13
 3be:	a3 e0       	ldi	r26, 0x03	; 3
 3c0:	81 50       	subi	r24, 0x01	; 1
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	a0 40       	sbci	r26, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <LCD_Floor_shift_middle_1+0x14>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_Floor_shift_middle_1+0x1e>
 3ca:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화
 3cc:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();			
 3d0:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 3d4:	1f 5f       	subi	r17, 0xFF	; 255

// 1층 shift로 표시
void LCD_Floor_shift_middle_1(void)
{
		int shift = 0;
		for(shift = 0; shift<8; shift++)
 3d6:	1f 38       	cpi	r17, 0x8F	; 143
 3d8:	59 f7       	brne	.-42     	; 0x3b0 <LCD_Floor_shift_middle_1+0x4>
			LCD_string(0x87+shift, "1"); // Start address is 0x80(0,0)
			_delay_ms(4000);
			LCD_initialize(); // 초기화
			Switch();			
	 	}	
}
 3da:	1f 91       	pop	r17
 3dc:	08 95       	ret

000003de <LCD_Floor_shift_middle_B1>:

// B1층 shift로 표시
void LCD_Floor_shift_middle_B1(void)
{
 3de:	1f 93       	push	r17
 3e0:	17 e8       	ldi	r17, 0x87	; 135
		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x87+shift, "B1"); // Start address is 0x80(0,0)
 3e2:	81 2f       	mov	r24, r17
 3e4:	67 e1       	ldi	r22, 0x17	; 23
 3e6:	71 e0       	ldi	r23, 0x01	; 1
 3e8:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 3ec:	8f e3       	ldi	r24, 0x3F	; 63
 3ee:	9d e0       	ldi	r25, 0x0D	; 13
 3f0:	a3 e0       	ldi	r26, 0x03	; 3
 3f2:	81 50       	subi	r24, 0x01	; 1
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	a0 40       	sbci	r26, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <LCD_Floor_shift_middle_B1+0x14>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_Floor_shift_middle_B1+0x1e>
 3fc:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화		(초기화를 안하면 BBBBB1으로 글자가 남는다.)
 3fe:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();	
 402:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 406:	1f 5f       	subi	r17, 0xFF	; 255

// B1층 shift로 표시
void LCD_Floor_shift_middle_B1(void)
{
		int shift = 0;
		for(shift = 0; shift<8; shift++)
 408:	1f 38       	cpi	r17, 0x8F	; 143
 40a:	59 f7       	brne	.-42     	; 0x3e2 <LCD_Floor_shift_middle_B1+0x4>
			LCD_string(0x87+shift, "B1"); // Start address is 0x80(0,0)
			_delay_ms(4000);
			LCD_initialize(); // 초기화		(초기화를 안하면 BBBBB1으로 글자가 남는다.)
			Switch();	
	 	}	
}
 40c:	1f 91       	pop	r17
 40e:	08 95       	ret

00000410 <LCD_Floor_shift_left_stay_middle_3>:
	 	}	
}

// 3층 shift로 표시
void LCD_Floor_shift_left_stay_middle_3(void)
{
 410:	1f 93       	push	r17
 412:	10 e8       	ldi	r17, 0x80	; 128

		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x80+shift, "3"); // Start address is 0x80(0,0)
 414:	81 2f       	mov	r24, r17
 416:	61 e1       	ldi	r22, 0x11	; 17
 418:	71 e0       	ldi	r23, 0x01	; 1
 41a:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 41e:	8f e3       	ldi	r24, 0x3F	; 63
 420:	9d e0       	ldi	r25, 0x0D	; 13
 422:	a3 e0       	ldi	r26, 0x03	; 3
 424:	81 50       	subi	r24, 0x01	; 1
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	a0 40       	sbci	r26, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <LCD_Floor_shift_left_stay_middle_3+0x14>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <LCD_Floor_shift_left_stay_middle_3+0x1e>
 42e:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화
 430:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();			
 434:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 438:	1f 5f       	subi	r17, 0xFF	; 255
// 3층 shift로 표시
void LCD_Floor_shift_left_stay_middle_3(void)
{

		int shift = 0;
		for(shift = 0; shift<8; shift++)
 43a:	18 38       	cpi	r17, 0x88	; 136
 43c:	59 f7       	brne	.-42     	; 0x414 <LCD_Floor_shift_left_stay_middle_3+0x4>
			_delay_ms(4000);
			LCD_initialize(); // 초기화
			Switch();			
	 	}	

}
 43e:	1f 91       	pop	r17
 440:	08 95       	ret

00000442 <LCD_Floor_shift_left_stay_middle_2>:
	 	}	
}

// 2층 shift로 표시
void LCD_Floor_shift_left_stay_middle_2(void)
{
 442:	1f 93       	push	r17
 444:	10 e8       	ldi	r17, 0x80	; 128

		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x80+shift, "2"); // Start address is 0x80(0,0)
 446:	81 2f       	mov	r24, r17
 448:	63 e1       	ldi	r22, 0x13	; 19
 44a:	71 e0       	ldi	r23, 0x01	; 1
 44c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 450:	8f e3       	ldi	r24, 0x3F	; 63
 452:	9d e0       	ldi	r25, 0x0D	; 13
 454:	a3 e0       	ldi	r26, 0x03	; 3
 456:	81 50       	subi	r24, 0x01	; 1
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	a0 40       	sbci	r26, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <LCD_Floor_shift_left_stay_middle_2+0x14>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_Floor_shift_left_stay_middle_2+0x1e>
 460:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화
 462:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();						
 466:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 46a:	1f 5f       	subi	r17, 0xFF	; 255
// 2층 shift로 표시
void LCD_Floor_shift_left_stay_middle_2(void)
{

		int shift = 0;
		for(shift = 0; shift<8; shift++)
 46c:	18 38       	cpi	r17, 0x88	; 136
 46e:	59 f7       	brne	.-42     	; 0x446 <LCD_Floor_shift_left_stay_middle_2+0x4>
			LCD_string(0x80+shift, "2"); // Start address is 0x80(0,0)
			_delay_ms(4000);
			LCD_initialize(); // 초기화
			Switch();						
	 	}	
}
 470:	1f 91       	pop	r17
 472:	08 95       	ret

00000474 <LCD_Floor_shift_left_stay_middle_1>:
	 	}	
}

// 1층 shift로 표시
void LCD_Floor_shift_left_stay_middle_1(void)
{
 474:	1f 93       	push	r17
 476:	10 e8       	ldi	r17, 0x80	; 128
		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x80+shift, "1"); // Start address is 0x80(0,0)
 478:	81 2f       	mov	r24, r17
 47a:	65 e1       	ldi	r22, 0x15	; 21
 47c:	71 e0       	ldi	r23, 0x01	; 1
 47e:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 482:	8f e3       	ldi	r24, 0x3F	; 63
 484:	9d e0       	ldi	r25, 0x0D	; 13
 486:	a3 e0       	ldi	r26, 0x03	; 3
 488:	81 50       	subi	r24, 0x01	; 1
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	a0 40       	sbci	r26, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <LCD_Floor_shift_left_stay_middle_1+0x14>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_Floor_shift_left_stay_middle_1+0x1e>
 492:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화	
 494:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();		
 498:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 49c:	1f 5f       	subi	r17, 0xFF	; 255

// 1층 shift로 표시
void LCD_Floor_shift_left_stay_middle_1(void)
{
		int shift = 0;
		for(shift = 0; shift<8; shift++)
 49e:	18 38       	cpi	r17, 0x88	; 136
 4a0:	59 f7       	brne	.-42     	; 0x478 <LCD_Floor_shift_left_stay_middle_1+0x4>
			LCD_string(0x80+shift, "1"); // Start address is 0x80(0,0)
			_delay_ms(4000);
			LCD_initialize(); // 초기화	
			Switch();		
	 	}	
}
 4a2:	1f 91       	pop	r17
 4a4:	08 95       	ret

000004a6 <up_down_state>:
volatile unsigned int Floor = 0;
volatile unsigned int Elevator = 0;


void up_down_state(void)
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
//////////////////////////////////////3층 올라가는 버튼//////////////////////////////////////////////	
	if(pinc1==0)
 4aa:	80 91 2f 01 	lds	r24, 0x012F
 4ae:	88 23       	and	r24, r24
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <up_down_state+0xe>
 4b2:	9c c0       	rjmp	.+312    	; 0x5ec <up_down_state+0x146>
	{
		
		Floor = 3;
 4b4:	83 e0       	ldi	r24, 0x03	; 3
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	90 93 1b 01 	sts	0x011B, r25
 4bc:	80 93 1a 01 	sts	0x011A, r24
						
				if(Elevator == 0)
 4c0:	80 91 1c 01 	lds	r24, 0x011C
 4c4:	90 91 1d 01 	lds	r25, 0x011D
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	b9 f4       	brne	.+46     	; 0x4fa <up_down_state+0x54>
				{	
					if(Floor>Elevator) // B1 >> 1
 4cc:	20 91 1a 01 	lds	r18, 0x011A
 4d0:	30 91 1b 01 	lds	r19, 0x011B
 4d4:	80 91 1c 01 	lds	r24, 0x011C
 4d8:	90 91 1d 01 	lds	r25, 0x011D
 4dc:	82 17       	cp	r24, r18
 4de:	93 07       	cpc	r25, r19
 4e0:	60 f4       	brcc	.+24     	; 0x4fa <up_down_state+0x54>
					{
						LCD_Floor_shift_middle_B1();
 4e2:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_Floor_shift_middle_B1>
						LCD_Floor_shift_left_stay_middle_1();
 4e6:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();	
 4ea:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	90 93 1d 01 	sts	0x011D, r25
 4f6:	80 93 1c 01 	sts	0x011C, r24
					}
				}

				if(Elevator == 1)
 4fa:	80 91 1c 01 	lds	r24, 0x011C
 4fe:	90 91 1d 01 	lds	r25, 0x011D
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	91 05       	cpc	r25, r1
 506:	b9 f4       	brne	.+46     	; 0x536 <up_down_state+0x90>
				{	
		
					if(Floor>Elevator) // 1 >> 2
 508:	20 91 1a 01 	lds	r18, 0x011A
 50c:	30 91 1b 01 	lds	r19, 0x011B
 510:	80 91 1c 01 	lds	r24, 0x011C
 514:	90 91 1d 01 	lds	r25, 0x011D
 518:	82 17       	cp	r24, r18
 51a:	93 07       	cpc	r25, r19
 51c:	60 f4       	brcc	.+24     	; 0x536 <up_down_state+0x90>
					{
						LCD_Floor_shift_middle_1();
 51e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_Floor_shift_middle_1>
						LCD_Floor_shift_left_stay_middle_2();
 522:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();	
 526:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 1d 01 	sts	0x011D, r25
 532:	80 93 1c 01 	sts	0x011C, r24
					}		
			
				}

				if(Elevator == 2)
 536:	80 91 1c 01 	lds	r24, 0x011C
 53a:	90 91 1d 01 	lds	r25, 0x011D
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	91 05       	cpc	r25, r1
 542:	09 f0       	breq	.+2      	; 0x546 <up_down_state+0xa0>
 544:	53 c0       	rjmp	.+166    	; 0x5ec <up_down_state+0x146>
				{	
		
					if(Floor>Elevator)  // 2 >> 3
 546:	20 91 1a 01 	lds	r18, 0x011A
 54a:	30 91 1b 01 	lds	r19, 0x011B
 54e:	80 91 1c 01 	lds	r24, 0x011C
 552:	90 91 1d 01 	lds	r25, 0x011D
 556:	82 17       	cp	r24, r18
 558:	93 07       	cpc	r25, r19
 55a:	08 f0       	brcs	.+2      	; 0x55e <up_down_state+0xb8>
 55c:	47 c0       	rjmp	.+142    	; 0x5ec <up_down_state+0x146>
					{
						LCD_Floor_shift_middle_2();
 55e:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_Floor_shift_middle_2>
						LCD_Floor_shift_left_stay_middle_3();
 562:	0e 94 08 02 	call	0x410	; 0x410 <LCD_Floor_shift_left_stay_middle_3>
						LCD_Floor_stay_3();
 566:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_Floor_stay_3>
						Elevator = 3;
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 1d 01 	sts	0x011D, r25
 572:	80 93 1c 01 	sts	0x011C, r24
						
						Data_1 = 0;
 576:	10 92 31 01 	sts	0x0131, r1
 57a:	10 92 30 01 	sts	0x0130, r1
						Switch();
 57e:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>

						PORTD = 0b00111110;
 582:	9e e3       	ldi	r25, 0x3E	; 62
 584:	92 bb       	out	0x12, r25	; 18
 586:	2f e7       	ldi	r18, 0x7F	; 127
 588:	34 e8       	ldi	r19, 0x84	; 132
 58a:	4e e1       	ldi	r20, 0x1E	; 30
 58c:	21 50       	subi	r18, 0x01	; 1
 58e:	30 40       	sbci	r19, 0x00	; 0
 590:	40 40       	sbci	r20, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <up_down_state+0xe6>
 594:	00 c0       	rjmp	.+0      	; 0x596 <up_down_state+0xf0>
 596:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 598:	8f e3       	ldi	r24, 0x3F	; 63
 59a:	82 bb       	out	0x12, r24	; 18
 59c:	2f e7       	ldi	r18, 0x7F	; 127
 59e:	34 e8       	ldi	r19, 0x84	; 132
 5a0:	4e e1       	ldi	r20, 0x1E	; 30
 5a2:	21 50       	subi	r18, 0x01	; 1
 5a4:	30 40       	sbci	r19, 0x00	; 0
 5a6:	40 40       	sbci	r20, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <up_down_state+0xfc>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <up_down_state+0x106>
 5ac:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111110;
 5ae:	92 bb       	out	0x12, r25	; 18
 5b0:	2f e7       	ldi	r18, 0x7F	; 127
 5b2:	34 e8       	ldi	r19, 0x84	; 132
 5b4:	4e e1       	ldi	r20, 0x1E	; 30
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	30 40       	sbci	r19, 0x00	; 0
 5ba:	40 40       	sbci	r20, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <up_down_state+0x110>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <up_down_state+0x11a>
 5c0:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 5c2:	82 bb       	out	0x12, r24	; 18
 5c4:	2f e7       	ldi	r18, 0x7F	; 127
 5c6:	34 e8       	ldi	r19, 0x84	; 132
 5c8:	4e e1       	ldi	r20, 0x1E	; 30
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	30 40       	sbci	r19, 0x00	; 0
 5ce:	40 40       	sbci	r20, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <up_down_state+0x124>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <up_down_state+0x12e>
 5d4:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111110;
 5d6:	92 bb       	out	0x12, r25	; 18
 5d8:	2f ed       	ldi	r18, 0xDF	; 223
 5da:	37 e6       	ldi	r19, 0x67	; 103
 5dc:	45 e3       	ldi	r20, 0x35	; 53
 5de:	21 50       	subi	r18, 0x01	; 1
 5e0:	30 40       	sbci	r19, 0x00	; 0
 5e2:	40 40       	sbci	r20, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <up_down_state+0x138>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <up_down_state+0x142>
 5e8:	00 00       	nop
						_delay_ms(70000);
						PORTD = 0b00111111;
 5ea:	82 bb       	out	0x12, r24	; 18
				 
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////	

//////////////////////////////////////3층 내려가는 버튼//////////////////////////////////////////////	
	if(pinc2==0)
 5ec:	80 91 20 01 	lds	r24, 0x0120
 5f0:	88 23       	and	r24, r24
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <up_down_state+0x150>
 5f4:	9a c0       	rjmp	.+308    	; 0x72a <up_down_state+0x284>
	{
		
		Floor = 3;
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	90 93 1b 01 	sts	0x011B, r25
 5fe:	80 93 1a 01 	sts	0x011A, r24
			
				if(Elevator == 0)
 602:	80 91 1c 01 	lds	r24, 0x011C
 606:	90 91 1d 01 	lds	r25, 0x011D
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	b9 f4       	brne	.+46     	; 0x63c <up_down_state+0x196>
				{	
					if(Floor>Elevator) // B1 >> 1
 60e:	20 91 1a 01 	lds	r18, 0x011A
 612:	30 91 1b 01 	lds	r19, 0x011B
 616:	80 91 1c 01 	lds	r24, 0x011C
 61a:	90 91 1d 01 	lds	r25, 0x011D
 61e:	82 17       	cp	r24, r18
 620:	93 07       	cpc	r25, r19
 622:	60 f4       	brcc	.+24     	; 0x63c <up_down_state+0x196>
					{
						LCD_Floor_shift_middle_B1();
 624:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_Floor_shift_middle_B1>
						LCD_Floor_shift_left_stay_middle_1();
 628:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();	
 62c:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	90 93 1d 01 	sts	0x011D, r25
 638:	80 93 1c 01 	sts	0x011C, r24
					}
				}

				if(Elevator == 1)
 63c:	80 91 1c 01 	lds	r24, 0x011C
 640:	90 91 1d 01 	lds	r25, 0x011D
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	91 05       	cpc	r25, r1
 648:	b9 f4       	brne	.+46     	; 0x678 <up_down_state+0x1d2>
				{	
		
					if(Floor>Elevator) // 1 >> 2
 64a:	20 91 1a 01 	lds	r18, 0x011A
 64e:	30 91 1b 01 	lds	r19, 0x011B
 652:	80 91 1c 01 	lds	r24, 0x011C
 656:	90 91 1d 01 	lds	r25, 0x011D
 65a:	82 17       	cp	r24, r18
 65c:	93 07       	cpc	r25, r19
 65e:	60 f4       	brcc	.+24     	; 0x678 <up_down_state+0x1d2>
					{
						LCD_Floor_shift_middle_1();
 660:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_Floor_shift_middle_1>
						LCD_Floor_shift_left_stay_middle_2();
 664:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();	
 668:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	90 93 1d 01 	sts	0x011D, r25
 674:	80 93 1c 01 	sts	0x011C, r24
					}		
			
				}

				if(Elevator == 2)
 678:	80 91 1c 01 	lds	r24, 0x011C
 67c:	90 91 1d 01 	lds	r25, 0x011D
 680:	82 30       	cpi	r24, 0x02	; 2
 682:	91 05       	cpc	r25, r1
 684:	b9 f4       	brne	.+46     	; 0x6b4 <up_down_state+0x20e>
				{	
		
					if(Floor>Elevator)  // 2 >> 3
 686:	20 91 1a 01 	lds	r18, 0x011A
 68a:	30 91 1b 01 	lds	r19, 0x011B
 68e:	80 91 1c 01 	lds	r24, 0x011C
 692:	90 91 1d 01 	lds	r25, 0x011D
 696:	82 17       	cp	r24, r18
 698:	93 07       	cpc	r25, r19
 69a:	60 f4       	brcc	.+24     	; 0x6b4 <up_down_state+0x20e>
					{
						LCD_Floor_shift_middle_2();
 69c:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_Floor_shift_middle_2>
						LCD_Floor_shift_left_stay_middle_3();
 6a0:	0e 94 08 02 	call	0x410	; 0x410 <LCD_Floor_shift_left_stay_middle_3>
						LCD_Floor_stay_3();
 6a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_Floor_stay_3>
						Elevator = 3;
 6a8:	83 e0       	ldi	r24, 0x03	; 3
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	90 93 1d 01 	sts	0x011D, r25
 6b0:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				 

				 		Data_2 = 0;
 6b4:	10 92 2b 01 	sts	0x012B, r1
 6b8:	10 92 2a 01 	sts	0x012A, r1
						Switch();
 6bc:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>

						PORTD = 0b00111101;
 6c0:	9d e3       	ldi	r25, 0x3D	; 61
 6c2:	92 bb       	out	0x12, r25	; 18
 6c4:	2f e7       	ldi	r18, 0x7F	; 127
 6c6:	34 e8       	ldi	r19, 0x84	; 132
 6c8:	4e e1       	ldi	r20, 0x1E	; 30
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	30 40       	sbci	r19, 0x00	; 0
 6ce:	40 40       	sbci	r20, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <up_down_state+0x224>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <up_down_state+0x22e>
 6d4:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 6d6:	8f e3       	ldi	r24, 0x3F	; 63
 6d8:	82 bb       	out	0x12, r24	; 18
 6da:	2f e7       	ldi	r18, 0x7F	; 127
 6dc:	34 e8       	ldi	r19, 0x84	; 132
 6de:	4e e1       	ldi	r20, 0x1E	; 30
 6e0:	21 50       	subi	r18, 0x01	; 1
 6e2:	30 40       	sbci	r19, 0x00	; 0
 6e4:	40 40       	sbci	r20, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <up_down_state+0x23a>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <up_down_state+0x244>
 6ea:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111101;
 6ec:	92 bb       	out	0x12, r25	; 18
 6ee:	2f e7       	ldi	r18, 0x7F	; 127
 6f0:	34 e8       	ldi	r19, 0x84	; 132
 6f2:	4e e1       	ldi	r20, 0x1E	; 30
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	30 40       	sbci	r19, 0x00	; 0
 6f8:	40 40       	sbci	r20, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <up_down_state+0x24e>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <up_down_state+0x258>
 6fe:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 700:	82 bb       	out	0x12, r24	; 18
 702:	2f e7       	ldi	r18, 0x7F	; 127
 704:	34 e8       	ldi	r19, 0x84	; 132
 706:	4e e1       	ldi	r20, 0x1E	; 30
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	30 40       	sbci	r19, 0x00	; 0
 70c:	40 40       	sbci	r20, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <up_down_state+0x262>
 710:	00 c0       	rjmp	.+0      	; 0x712 <up_down_state+0x26c>
 712:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111101;
 714:	92 bb       	out	0x12, r25	; 18
 716:	2f ed       	ldi	r18, 0xDF	; 223
 718:	37 e6       	ldi	r19, 0x67	; 103
 71a:	45 e3       	ldi	r20, 0x35	; 53
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	30 40       	sbci	r19, 0x00	; 0
 720:	40 40       	sbci	r20, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <up_down_state+0x276>
 724:	00 c0       	rjmp	.+0      	; 0x726 <up_down_state+0x280>
 726:	00 00       	nop
						_delay_ms(70000);
						PORTD = 0b00111111;
 728:	82 bb       	out	0x12, r24	; 18

	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	
//////////////////////////////////////2층 내려가는 버튼//////////////////////////////////////////////		
	if(pinc3==0)
 72a:	80 91 23 01 	lds	r24, 0x0123
 72e:	88 23       	and	r24, r24
 730:	09 f0       	breq	.+2      	; 0x734 <up_down_state+0x28e>
 732:	9a c0       	rjmp	.+308    	; 0x868 <up_down_state+0x3c2>
	{

		Floor = 2;
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	90 93 1b 01 	sts	0x011B, r25
 73c:	80 93 1a 01 	sts	0x011A, r24
				
				if(Elevator == 0)
 740:	80 91 1c 01 	lds	r24, 0x011C
 744:	90 91 1d 01 	lds	r25, 0x011D
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	b9 f4       	brne	.+46     	; 0x77a <up_down_state+0x2d4>
				{
					if(Floor>Elevator) // B1 >> 1
 74c:	20 91 1a 01 	lds	r18, 0x011A
 750:	30 91 1b 01 	lds	r19, 0x011B
 754:	80 91 1c 01 	lds	r24, 0x011C
 758:	90 91 1d 01 	lds	r25, 0x011D
 75c:	82 17       	cp	r24, r18
 75e:	93 07       	cpc	r25, r19
 760:	60 f4       	brcc	.+24     	; 0x77a <up_down_state+0x2d4>
					{
						LCD_Floor_shift_middle_B1();
 762:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_Floor_shift_middle_B1>
						LCD_Floor_shift_left_stay_middle_1();
 766:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();	
 76a:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	90 93 1d 01 	sts	0x011D, r25
 776:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				if(Elevator ==1 )
 77a:	80 91 1c 01 	lds	r24, 0x011C
 77e:	90 91 1d 01 	lds	r25, 0x011D
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	91 05       	cpc	r25, r1
 786:	b9 f4       	brne	.+46     	; 0x7b6 <up_down_state+0x310>
				{
					if(Floor>Elevator) // 1 >> 2
 788:	20 91 1a 01 	lds	r18, 0x011A
 78c:	30 91 1b 01 	lds	r19, 0x011B
 790:	80 91 1c 01 	lds	r24, 0x011C
 794:	90 91 1d 01 	lds	r25, 0x011D
 798:	82 17       	cp	r24, r18
 79a:	93 07       	cpc	r25, r19
 79c:	60 f4       	brcc	.+24     	; 0x7b6 <up_down_state+0x310>
					{
						LCD_Floor_shift_middle_1();
 79e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_Floor_shift_middle_1>
						LCD_Floor_shift_left_stay_middle_2();
 7a2:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();	
 7a6:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	90 93 1d 01 	sts	0x011D, r25
 7b2:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				if(Elevator == 3)
 7b6:	80 91 1c 01 	lds	r24, 0x011C
 7ba:	90 91 1d 01 	lds	r25, 0x011D
 7be:	83 30       	cpi	r24, 0x03	; 3
 7c0:	91 05       	cpc	r25, r1
 7c2:	b9 f4       	brne	.+46     	; 0x7f2 <up_down_state+0x34c>
				{
					if(Floor<Elevator) // 3 >> 2
 7c4:	20 91 1a 01 	lds	r18, 0x011A
 7c8:	30 91 1b 01 	lds	r19, 0x011B
 7cc:	80 91 1c 01 	lds	r24, 0x011C
 7d0:	90 91 1d 01 	lds	r25, 0x011D
 7d4:	28 17       	cp	r18, r24
 7d6:	39 07       	cpc	r19, r25
 7d8:	60 f4       	brcc	.+24     	; 0x7f2 <up_down_state+0x34c>
					{
						LCD_Floor_shift_middle_3();
 7da:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Floor_shift_middle_3>
						LCD_Floor_shift_left_stay_middle_2();
 7de:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();
 7e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 7e6:	82 e0       	ldi	r24, 0x02	; 2
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	90 93 1d 01 	sts	0x011D, r25
 7ee:	80 93 1c 01 	sts	0x011C, r24
					}
				}
		

						Data_3 = 0;
 7f2:	10 92 1f 01 	sts	0x011F, r1
 7f6:	10 92 1e 01 	sts	0x011E, r1
						Switch();
 7fa:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>

						PORTD = 0b00111011;
 7fe:	9b e3       	ldi	r25, 0x3B	; 59
 800:	92 bb       	out	0x12, r25	; 18
 802:	2f e7       	ldi	r18, 0x7F	; 127
 804:	34 e8       	ldi	r19, 0x84	; 132
 806:	4e e1       	ldi	r20, 0x1E	; 30
 808:	21 50       	subi	r18, 0x01	; 1
 80a:	30 40       	sbci	r19, 0x00	; 0
 80c:	40 40       	sbci	r20, 0x00	; 0
 80e:	e1 f7       	brne	.-8      	; 0x808 <up_down_state+0x362>
 810:	00 c0       	rjmp	.+0      	; 0x812 <up_down_state+0x36c>
 812:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 814:	8f e3       	ldi	r24, 0x3F	; 63
 816:	82 bb       	out	0x12, r24	; 18
 818:	2f e7       	ldi	r18, 0x7F	; 127
 81a:	34 e8       	ldi	r19, 0x84	; 132
 81c:	4e e1       	ldi	r20, 0x1E	; 30
 81e:	21 50       	subi	r18, 0x01	; 1
 820:	30 40       	sbci	r19, 0x00	; 0
 822:	40 40       	sbci	r20, 0x00	; 0
 824:	e1 f7       	brne	.-8      	; 0x81e <up_down_state+0x378>
 826:	00 c0       	rjmp	.+0      	; 0x828 <up_down_state+0x382>
 828:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111011;
 82a:	92 bb       	out	0x12, r25	; 18
 82c:	2f e7       	ldi	r18, 0x7F	; 127
 82e:	34 e8       	ldi	r19, 0x84	; 132
 830:	4e e1       	ldi	r20, 0x1E	; 30
 832:	21 50       	subi	r18, 0x01	; 1
 834:	30 40       	sbci	r19, 0x00	; 0
 836:	40 40       	sbci	r20, 0x00	; 0
 838:	e1 f7       	brne	.-8      	; 0x832 <up_down_state+0x38c>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <up_down_state+0x396>
 83c:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 83e:	82 bb       	out	0x12, r24	; 18
 840:	2f e7       	ldi	r18, 0x7F	; 127
 842:	34 e8       	ldi	r19, 0x84	; 132
 844:	4e e1       	ldi	r20, 0x1E	; 30
 846:	21 50       	subi	r18, 0x01	; 1
 848:	30 40       	sbci	r19, 0x00	; 0
 84a:	40 40       	sbci	r20, 0x00	; 0
 84c:	e1 f7       	brne	.-8      	; 0x846 <up_down_state+0x3a0>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <up_down_state+0x3aa>
 850:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111011;
 852:	92 bb       	out	0x12, r25	; 18
 854:	2f ed       	ldi	r18, 0xDF	; 223
 856:	37 e6       	ldi	r19, 0x67	; 103
 858:	45 e3       	ldi	r20, 0x35	; 53
 85a:	21 50       	subi	r18, 0x01	; 1
 85c:	30 40       	sbci	r19, 0x00	; 0
 85e:	40 40       	sbci	r20, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <up_down_state+0x3b4>
 862:	00 c0       	rjmp	.+0      	; 0x864 <up_down_state+0x3be>
 864:	00 00       	nop
						_delay_ms(70000);
						PORTD = 0b00111111;
 866:	82 bb       	out	0x12, r24	; 18

	}
/////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////2층 내려가는 버튼//////////////////////////////////////////////		
	if(pinc4==0)
 868:	80 91 29 01 	lds	r24, 0x0129
 86c:	88 23       	and	r24, r24
 86e:	09 f0       	breq	.+2      	; 0x872 <up_down_state+0x3cc>
 870:	9a c0       	rjmp	.+308    	; 0x9a6 <up_down_state+0x500>
	{

		Floor = 2;
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	90 93 1b 01 	sts	0x011B, r25
 87a:	80 93 1a 01 	sts	0x011A, r24
				
				if(Elevator == 0)
 87e:	80 91 1c 01 	lds	r24, 0x011C
 882:	90 91 1d 01 	lds	r25, 0x011D
 886:	00 97       	sbiw	r24, 0x00	; 0
 888:	b9 f4       	brne	.+46     	; 0x8b8 <up_down_state+0x412>
				{
					if(Floor>Elevator) // B1 >> 1
 88a:	20 91 1a 01 	lds	r18, 0x011A
 88e:	30 91 1b 01 	lds	r19, 0x011B
 892:	80 91 1c 01 	lds	r24, 0x011C
 896:	90 91 1d 01 	lds	r25, 0x011D
 89a:	82 17       	cp	r24, r18
 89c:	93 07       	cpc	r25, r19
 89e:	60 f4       	brcc	.+24     	; 0x8b8 <up_down_state+0x412>
					{
						LCD_Floor_shift_middle_B1();
 8a0:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_Floor_shift_middle_B1>
						LCD_Floor_shift_left_stay_middle_1();
 8a4:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();	
 8a8:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	90 93 1d 01 	sts	0x011D, r25
 8b4:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				if(Elevator ==1 )
 8b8:	80 91 1c 01 	lds	r24, 0x011C
 8bc:	90 91 1d 01 	lds	r25, 0x011D
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	91 05       	cpc	r25, r1
 8c4:	b9 f4       	brne	.+46     	; 0x8f4 <up_down_state+0x44e>
				{
					if(Floor>Elevator) // 1 >> 2
 8c6:	20 91 1a 01 	lds	r18, 0x011A
 8ca:	30 91 1b 01 	lds	r19, 0x011B
 8ce:	80 91 1c 01 	lds	r24, 0x011C
 8d2:	90 91 1d 01 	lds	r25, 0x011D
 8d6:	82 17       	cp	r24, r18
 8d8:	93 07       	cpc	r25, r19
 8da:	60 f4       	brcc	.+24     	; 0x8f4 <up_down_state+0x44e>
					{
						LCD_Floor_shift_middle_1();
 8dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_Floor_shift_middle_1>
						LCD_Floor_shift_left_stay_middle_2();
 8e0:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();	
 8e4:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	90 93 1d 01 	sts	0x011D, r25
 8f0:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				if(Elevator == 3)
 8f4:	80 91 1c 01 	lds	r24, 0x011C
 8f8:	90 91 1d 01 	lds	r25, 0x011D
 8fc:	83 30       	cpi	r24, 0x03	; 3
 8fe:	91 05       	cpc	r25, r1
 900:	b9 f4       	brne	.+46     	; 0x930 <up_down_state+0x48a>
				{
					if(Floor<Elevator) // 3 >> 2
 902:	20 91 1a 01 	lds	r18, 0x011A
 906:	30 91 1b 01 	lds	r19, 0x011B
 90a:	80 91 1c 01 	lds	r24, 0x011C
 90e:	90 91 1d 01 	lds	r25, 0x011D
 912:	28 17       	cp	r18, r24
 914:	39 07       	cpc	r19, r25
 916:	60 f4       	brcc	.+24     	; 0x930 <up_down_state+0x48a>
					{
						LCD_Floor_shift_middle_3();
 918:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Floor_shift_middle_3>
						LCD_Floor_shift_left_stay_middle_2();
 91c:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();
 920:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	90 93 1d 01 	sts	0x011D, r25
 92c:	80 93 1c 01 	sts	0x011C, r24
					}
				}
						Data_4 = 0;
 930:	10 92 2d 01 	sts	0x012D, r1
 934:	10 92 2c 01 	sts	0x012C, r1
						Switch();
 938:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>

						PORTD = 0b00110111;
 93c:	97 e3       	ldi	r25, 0x37	; 55
 93e:	92 bb       	out	0x12, r25	; 18
 940:	2f e7       	ldi	r18, 0x7F	; 127
 942:	34 e8       	ldi	r19, 0x84	; 132
 944:	4e e1       	ldi	r20, 0x1E	; 30
 946:	21 50       	subi	r18, 0x01	; 1
 948:	30 40       	sbci	r19, 0x00	; 0
 94a:	40 40       	sbci	r20, 0x00	; 0
 94c:	e1 f7       	brne	.-8      	; 0x946 <up_down_state+0x4a0>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <up_down_state+0x4aa>
 950:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 952:	8f e3       	ldi	r24, 0x3F	; 63
 954:	82 bb       	out	0x12, r24	; 18
 956:	2f e7       	ldi	r18, 0x7F	; 127
 958:	34 e8       	ldi	r19, 0x84	; 132
 95a:	4e e1       	ldi	r20, 0x1E	; 30
 95c:	21 50       	subi	r18, 0x01	; 1
 95e:	30 40       	sbci	r19, 0x00	; 0
 960:	40 40       	sbci	r20, 0x00	; 0
 962:	e1 f7       	brne	.-8      	; 0x95c <up_down_state+0x4b6>
 964:	00 c0       	rjmp	.+0      	; 0x966 <up_down_state+0x4c0>
 966:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00110111;
 968:	92 bb       	out	0x12, r25	; 18
 96a:	2f e7       	ldi	r18, 0x7F	; 127
 96c:	34 e8       	ldi	r19, 0x84	; 132
 96e:	4e e1       	ldi	r20, 0x1E	; 30
 970:	21 50       	subi	r18, 0x01	; 1
 972:	30 40       	sbci	r19, 0x00	; 0
 974:	40 40       	sbci	r20, 0x00	; 0
 976:	e1 f7       	brne	.-8      	; 0x970 <up_down_state+0x4ca>
 978:	00 c0       	rjmp	.+0      	; 0x97a <up_down_state+0x4d4>
 97a:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 97c:	82 bb       	out	0x12, r24	; 18
 97e:	2f e7       	ldi	r18, 0x7F	; 127
 980:	34 e8       	ldi	r19, 0x84	; 132
 982:	4e e1       	ldi	r20, 0x1E	; 30
 984:	21 50       	subi	r18, 0x01	; 1
 986:	30 40       	sbci	r19, 0x00	; 0
 988:	40 40       	sbci	r20, 0x00	; 0
 98a:	e1 f7       	brne	.-8      	; 0x984 <up_down_state+0x4de>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <up_down_state+0x4e8>
 98e:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00110111;
 990:	92 bb       	out	0x12, r25	; 18
 992:	2f ed       	ldi	r18, 0xDF	; 223
 994:	37 e6       	ldi	r19, 0x67	; 103
 996:	45 e3       	ldi	r20, 0x35	; 53
 998:	21 50       	subi	r18, 0x01	; 1
 99a:	30 40       	sbci	r19, 0x00	; 0
 99c:	40 40       	sbci	r20, 0x00	; 0
 99e:	e1 f7       	brne	.-8      	; 0x998 <up_down_state+0x4f2>
 9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <up_down_state+0x4fc>
 9a2:	00 00       	nop
						_delay_ms(70000);
						PORTD = 0b00111111;		
 9a4:	82 bb       	out	0x12, r24	; 18
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////1층 올라가는 버튼//////////////////////////////////////////////
	if(pinc5==0)
 9a6:	80 91 2e 01 	lds	r24, 0x012E
 9aa:	88 23       	and	r24, r24
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <up_down_state+0x50a>
 9ae:	98 c0       	rjmp	.+304    	; 0xae0 <up_down_state+0x63a>
	{

		Floor = 1;
 9b0:	c1 e0       	ldi	r28, 0x01	; 1
 9b2:	d0 e0       	ldi	r29, 0x00	; 0
 9b4:	d0 93 1b 01 	sts	0x011B, r29
 9b8:	c0 93 1a 01 	sts	0x011A, r28
				
				if(Elevator == 0)
 9bc:	80 91 1c 01 	lds	r24, 0x011C
 9c0:	90 91 1d 01 	lds	r25, 0x011D
 9c4:	00 97       	sbiw	r24, 0x00	; 0
 9c6:	a9 f4       	brne	.+42     	; 0x9f2 <up_down_state+0x54c>
				{
					if(Floor>Elevator) // B1 >> 1
 9c8:	20 91 1a 01 	lds	r18, 0x011A
 9cc:	30 91 1b 01 	lds	r19, 0x011B
 9d0:	80 91 1c 01 	lds	r24, 0x011C
 9d4:	90 91 1d 01 	lds	r25, 0x011D
 9d8:	82 17       	cp	r24, r18
 9da:	93 07       	cpc	r25, r19
 9dc:	50 f4       	brcc	.+20     	; 0x9f2 <up_down_state+0x54c>
					{
						LCD_Floor_shift_middle_B1();
 9de:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_Floor_shift_middle_B1>
						LCD_Floor_shift_left_stay_middle_1();
 9e2:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();	
 9e6:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 9ea:	d0 93 1d 01 	sts	0x011D, r29
 9ee:	c0 93 1c 01 	sts	0x011C, r28
					}
						
				}
				if(Elevator == 3)
 9f2:	80 91 1c 01 	lds	r24, 0x011C
 9f6:	90 91 1d 01 	lds	r25, 0x011D
 9fa:	83 30       	cpi	r24, 0x03	; 3
 9fc:	91 05       	cpc	r25, r1
 9fe:	b9 f4       	brne	.+46     	; 0xa2e <up_down_state+0x588>
				{
					if(Floor<Elevator) // 3 >> 2
 a00:	20 91 1a 01 	lds	r18, 0x011A
 a04:	30 91 1b 01 	lds	r19, 0x011B
 a08:	80 91 1c 01 	lds	r24, 0x011C
 a0c:	90 91 1d 01 	lds	r25, 0x011D
 a10:	28 17       	cp	r18, r24
 a12:	39 07       	cpc	r19, r25
 a14:	60 f4       	brcc	.+24     	; 0xa2e <up_down_state+0x588>
					{
						LCD_Floor_shift_middle_3();
 a16:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Floor_shift_middle_3>
						LCD_Floor_shift_left_stay_middle_2();
 a1a:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();
 a1e:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 a22:	82 e0       	ldi	r24, 0x02	; 2
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	90 93 1d 01 	sts	0x011D, r25
 a2a:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				if(Elevator == 2)
 a2e:	80 91 1c 01 	lds	r24, 0x011C
 a32:	90 91 1d 01 	lds	r25, 0x011D
 a36:	82 30       	cpi	r24, 0x02	; 2
 a38:	91 05       	cpc	r25, r1
 a3a:	b9 f4       	brne	.+46     	; 0xa6a <up_down_state+0x5c4>
				{
					if(Floor<Elevator) // 2 >> 1
 a3c:	20 91 1a 01 	lds	r18, 0x011A
 a40:	30 91 1b 01 	lds	r19, 0x011B
 a44:	80 91 1c 01 	lds	r24, 0x011C
 a48:	90 91 1d 01 	lds	r25, 0x011D
 a4c:	28 17       	cp	r18, r24
 a4e:	39 07       	cpc	r19, r25
 a50:	60 f4       	brcc	.+24     	; 0xa6a <up_down_state+0x5c4>
					{
						LCD_Floor_shift_middle_2();
 a52:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_Floor_shift_middle_2>
						LCD_Floor_shift_left_stay_middle_1();
 a56:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();
 a5a:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 a5e:	81 e0       	ldi	r24, 0x01	; 1
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	90 93 1d 01 	sts	0x011D, r25
 a66:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				
						Data_5 = 0;
 a6a:	10 92 22 01 	sts	0x0122, r1
 a6e:	10 92 21 01 	sts	0x0121, r1
						Switch();
 a72:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
						PORTD = 0b00101111;
 a76:	9f e2       	ldi	r25, 0x2F	; 47
 a78:	92 bb       	out	0x12, r25	; 18
 a7a:	2f e7       	ldi	r18, 0x7F	; 127
 a7c:	34 e8       	ldi	r19, 0x84	; 132
 a7e:	4e e1       	ldi	r20, 0x1E	; 30
 a80:	21 50       	subi	r18, 0x01	; 1
 a82:	30 40       	sbci	r19, 0x00	; 0
 a84:	40 40       	sbci	r20, 0x00	; 0
 a86:	e1 f7       	brne	.-8      	; 0xa80 <up_down_state+0x5da>
 a88:	00 c0       	rjmp	.+0      	; 0xa8a <up_down_state+0x5e4>
 a8a:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 a8c:	8f e3       	ldi	r24, 0x3F	; 63
 a8e:	82 bb       	out	0x12, r24	; 18
 a90:	2f e7       	ldi	r18, 0x7F	; 127
 a92:	34 e8       	ldi	r19, 0x84	; 132
 a94:	4e e1       	ldi	r20, 0x1E	; 30
 a96:	21 50       	subi	r18, 0x01	; 1
 a98:	30 40       	sbci	r19, 0x00	; 0
 a9a:	40 40       	sbci	r20, 0x00	; 0
 a9c:	e1 f7       	brne	.-8      	; 0xa96 <up_down_state+0x5f0>
 a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <up_down_state+0x5fa>
 aa0:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00101111;
 aa2:	92 bb       	out	0x12, r25	; 18
 aa4:	2f e7       	ldi	r18, 0x7F	; 127
 aa6:	34 e8       	ldi	r19, 0x84	; 132
 aa8:	4e e1       	ldi	r20, 0x1E	; 30
 aaa:	21 50       	subi	r18, 0x01	; 1
 aac:	30 40       	sbci	r19, 0x00	; 0
 aae:	40 40       	sbci	r20, 0x00	; 0
 ab0:	e1 f7       	brne	.-8      	; 0xaaa <up_down_state+0x604>
 ab2:	00 c0       	rjmp	.+0      	; 0xab4 <up_down_state+0x60e>
 ab4:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 ab6:	82 bb       	out	0x12, r24	; 18
 ab8:	2f e7       	ldi	r18, 0x7F	; 127
 aba:	34 e8       	ldi	r19, 0x84	; 132
 abc:	4e e1       	ldi	r20, 0x1E	; 30
 abe:	21 50       	subi	r18, 0x01	; 1
 ac0:	30 40       	sbci	r19, 0x00	; 0
 ac2:	40 40       	sbci	r20, 0x00	; 0
 ac4:	e1 f7       	brne	.-8      	; 0xabe <up_down_state+0x618>
 ac6:	00 c0       	rjmp	.+0      	; 0xac8 <up_down_state+0x622>
 ac8:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00101111;
 aca:	92 bb       	out	0x12, r25	; 18
 acc:	2f ed       	ldi	r18, 0xDF	; 223
 ace:	37 e6       	ldi	r19, 0x67	; 103
 ad0:	45 e3       	ldi	r20, 0x35	; 53
 ad2:	21 50       	subi	r18, 0x01	; 1
 ad4:	30 40       	sbci	r19, 0x00	; 0
 ad6:	40 40       	sbci	r20, 0x00	; 0
 ad8:	e1 f7       	brne	.-8      	; 0xad2 <up_down_state+0x62c>
 ada:	00 c0       	rjmp	.+0      	; 0xadc <up_down_state+0x636>
 adc:	00 00       	nop
						_delay_ms(70000);
						PORTD = 0b00111111;					
 ade:	82 bb       	out	0x12, r24	; 18

	}
/////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////1층 올라가는 버튼//////////////////////////////////////////////
	if(pinc6==0)
 ae0:	80 91 28 01 	lds	r24, 0x0128
 ae4:	88 23       	and	r24, r24
 ae6:	09 f0       	breq	.+2      	; 0xaea <up_down_state+0x644>
 ae8:	9c c0       	rjmp	.+312    	; 0xc22 <up_down_state+0x77c>
	{

		Floor = 1;
 aea:	c1 e0       	ldi	r28, 0x01	; 1
 aec:	d0 e0       	ldi	r29, 0x00	; 0
 aee:	d0 93 1b 01 	sts	0x011B, r29
 af2:	c0 93 1a 01 	sts	0x011A, r28
								
				if(Elevator == 0)
 af6:	80 91 1c 01 	lds	r24, 0x011C
 afa:	90 91 1d 01 	lds	r25, 0x011D
 afe:	00 97       	sbiw	r24, 0x00	; 0
 b00:	a9 f4       	brne	.+42     	; 0xb2c <up_down_state+0x686>
				{
					if(Floor>Elevator) // B1 >> 1
 b02:	20 91 1a 01 	lds	r18, 0x011A
 b06:	30 91 1b 01 	lds	r19, 0x011B
 b0a:	80 91 1c 01 	lds	r24, 0x011C
 b0e:	90 91 1d 01 	lds	r25, 0x011D
 b12:	82 17       	cp	r24, r18
 b14:	93 07       	cpc	r25, r19
 b16:	50 f4       	brcc	.+20     	; 0xb2c <up_down_state+0x686>
					{
						LCD_Floor_shift_middle_B1();
 b18:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_Floor_shift_middle_B1>
						LCD_Floor_shift_left_stay_middle_1();
 b1c:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();	
 b20:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 b24:	d0 93 1d 01 	sts	0x011D, r29
 b28:	c0 93 1c 01 	sts	0x011C, r28
					}
				}
				if(Elevator == 3)
 b2c:	80 91 1c 01 	lds	r24, 0x011C
 b30:	90 91 1d 01 	lds	r25, 0x011D
 b34:	83 30       	cpi	r24, 0x03	; 3
 b36:	91 05       	cpc	r25, r1
 b38:	b9 f4       	brne	.+46     	; 0xb68 <up_down_state+0x6c2>
				{
					if(Floor<Elevator) // 3 >> 2
 b3a:	20 91 1a 01 	lds	r18, 0x011A
 b3e:	30 91 1b 01 	lds	r19, 0x011B
 b42:	80 91 1c 01 	lds	r24, 0x011C
 b46:	90 91 1d 01 	lds	r25, 0x011D
 b4a:	28 17       	cp	r18, r24
 b4c:	39 07       	cpc	r19, r25
 b4e:	60 f4       	brcc	.+24     	; 0xb68 <up_down_state+0x6c2>
					{
						LCD_Floor_shift_middle_3();
 b50:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Floor_shift_middle_3>
						LCD_Floor_shift_left_stay_middle_2();
 b54:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Floor_shift_left_stay_middle_2>
						LCD_Floor_stay_2();
 b58:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Floor_stay_2>
						Elevator = 2;
 b5c:	82 e0       	ldi	r24, 0x02	; 2
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	90 93 1d 01 	sts	0x011D, r25
 b64:	80 93 1c 01 	sts	0x011C, r24
					}
				}
				if(Elevator == 2)
 b68:	80 91 1c 01 	lds	r24, 0x011C
 b6c:	90 91 1d 01 	lds	r25, 0x011D
 b70:	82 30       	cpi	r24, 0x02	; 2
 b72:	91 05       	cpc	r25, r1
 b74:	b9 f4       	brne	.+46     	; 0xba4 <up_down_state+0x6fe>
				{
					if(Floor<Elevator) // 2 >> 1
 b76:	20 91 1a 01 	lds	r18, 0x011A
 b7a:	30 91 1b 01 	lds	r19, 0x011B
 b7e:	80 91 1c 01 	lds	r24, 0x011C
 b82:	90 91 1d 01 	lds	r25, 0x011D
 b86:	28 17       	cp	r18, r24
 b88:	39 07       	cpc	r19, r25
 b8a:	60 f4       	brcc	.+24     	; 0xba4 <up_down_state+0x6fe>
					{
						LCD_Floor_shift_middle_2();
 b8c:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_Floor_shift_middle_2>
						LCD_Floor_shift_left_stay_middle_1();
 b90:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Floor_shift_left_stay_middle_1>
						LCD_Floor_stay_1();
 b94:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Floor_stay_1>
						Elevator = 1;
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	90 93 1d 01 	sts	0x011D, r25
 ba0:	80 93 1c 01 	sts	0x011C, r24
					}
				}
						
						Data_6 = 0;
 ba4:	10 92 25 01 	sts	0x0125, r1
 ba8:	10 92 24 01 	sts	0x0124, r1
						Switch();
 bac:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
						PORTD = 0b00011111;
 bb0:	9f e1       	ldi	r25, 0x1F	; 31
 bb2:	92 bb       	out	0x12, r25	; 18
 bb4:	2f e7       	ldi	r18, 0x7F	; 127
 bb6:	34 e8       	ldi	r19, 0x84	; 132
 bb8:	4e e1       	ldi	r20, 0x1E	; 30
 bba:	21 50       	subi	r18, 0x01	; 1
 bbc:	30 40       	sbci	r19, 0x00	; 0
 bbe:	40 40       	sbci	r20, 0x00	; 0
 bc0:	e1 f7       	brne	.-8      	; 0xbba <up_down_state+0x714>
 bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <up_down_state+0x71e>
 bc4:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 bc6:	8f e3       	ldi	r24, 0x3F	; 63
 bc8:	82 bb       	out	0x12, r24	; 18
 bca:	2f e7       	ldi	r18, 0x7F	; 127
 bcc:	34 e8       	ldi	r19, 0x84	; 132
 bce:	4e e1       	ldi	r20, 0x1E	; 30
 bd0:	21 50       	subi	r18, 0x01	; 1
 bd2:	30 40       	sbci	r19, 0x00	; 0
 bd4:	40 40       	sbci	r20, 0x00	; 0
 bd6:	e1 f7       	brne	.-8      	; 0xbd0 <up_down_state+0x72a>
 bd8:	00 c0       	rjmp	.+0      	; 0xbda <up_down_state+0x734>
 bda:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00011111;
 bdc:	92 bb       	out	0x12, r25	; 18
 bde:	2f e7       	ldi	r18, 0x7F	; 127
 be0:	34 e8       	ldi	r19, 0x84	; 132
 be2:	4e e1       	ldi	r20, 0x1E	; 30
 be4:	21 50       	subi	r18, 0x01	; 1
 be6:	30 40       	sbci	r19, 0x00	; 0
 be8:	40 40       	sbci	r20, 0x00	; 0
 bea:	e1 f7       	brne	.-8      	; 0xbe4 <up_down_state+0x73e>
 bec:	00 c0       	rjmp	.+0      	; 0xbee <up_down_state+0x748>
 bee:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00111111;
 bf0:	82 bb       	out	0x12, r24	; 18
 bf2:	2f e7       	ldi	r18, 0x7F	; 127
 bf4:	34 e8       	ldi	r19, 0x84	; 132
 bf6:	4e e1       	ldi	r20, 0x1E	; 30
 bf8:	21 50       	subi	r18, 0x01	; 1
 bfa:	30 40       	sbci	r19, 0x00	; 0
 bfc:	40 40       	sbci	r20, 0x00	; 0
 bfe:	e1 f7       	brne	.-8      	; 0xbf8 <up_down_state+0x752>
 c00:	00 c0       	rjmp	.+0      	; 0xc02 <up_down_state+0x75c>
 c02:	00 00       	nop
						_delay_ms(40000);
						PORTD = 0b00011111;
 c04:	92 bb       	out	0x12, r25	; 18
 c06:	2f ed       	ldi	r18, 0xDF	; 223
 c08:	37 e6       	ldi	r19, 0x67	; 103
 c0a:	45 e3       	ldi	r20, 0x35	; 53
 c0c:	21 50       	subi	r18, 0x01	; 1
 c0e:	30 40       	sbci	r19, 0x00	; 0
 c10:	40 40       	sbci	r20, 0x00	; 0
 c12:	e1 f7       	brne	.-8      	; 0xc0c <up_down_state+0x766>
 c14:	00 c0       	rjmp	.+0      	; 0xc16 <up_down_state+0x770>
 c16:	00 00       	nop
						_delay_ms(70000);
						PORTD = 0b00111111;
 c18:	82 bb       	out	0x12, r24	; 18
						Data_6 = 0;
 c1a:	10 92 25 01 	sts	0x0125, r1
 c1e:	10 92 24 01 	sts	0x0124, r1
						
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
}
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	08 95       	ret

00000c28 <main>:



int main(void)
{
	Set();
 c28:	0e 94 67 00 	call	0xce	; 0xce <Set>
	LCD_initialize(); // 초기화
 c2c:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>

	LCD_Floor_stay_B1();
 c30:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Floor_stay_B1>

	
		
	while(1)
	{	
		Switch();
 c34:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
		up_down_state();			
 c38:	0e 94 53 02 	call	0x4a6	; 0x4a6 <up_down_state>
 c3c:	fb cf       	rjmp	.-10     	; 0xc34 <main+0xc>

00000c3e <LCD_Floor_shift_left_stay_middle_B1>:


void LCD_Floor_shift_left_stay_middle_B1(void)
{
 c3e:	1f 93       	push	r17
 c40:	10 e8       	ldi	r17, 0x80	; 128
		int shift = 0;
		for(shift = 0; shift<8; shift++)
		{
			LCD_string(0x80+shift, "B1"); // Start address is 0x80(0,0)
 c42:	81 2f       	mov	r24, r17
 c44:	67 e1       	ldi	r22, 0x17	; 23
 c46:	71 e0       	ldi	r23, 0x01	; 1
 c48:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
 c4c:	8f e3       	ldi	r24, 0x3F	; 63
 c4e:	9d e0       	ldi	r25, 0x0D	; 13
 c50:	a3 e0       	ldi	r26, 0x03	; 3
 c52:	81 50       	subi	r24, 0x01	; 1
 c54:	90 40       	sbci	r25, 0x00	; 0
 c56:	a0 40       	sbci	r26, 0x00	; 0
 c58:	e1 f7       	brne	.-8      	; 0xc52 <LCD_Floor_shift_left_stay_middle_B1+0x14>
 c5a:	00 c0       	rjmp	.+0      	; 0xc5c <LCD_Floor_shift_left_stay_middle_B1+0x1e>
 c5c:	00 00       	nop
			_delay_ms(4000);
			LCD_initialize(); // 초기화		(초기화를 안하면 BBBBB1으로 글자가 남는다.)
 c5e:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
			Switch();
 c62:	0e 94 72 00 	call	0xe4	; 0xe4 <Switch>
 c66:	1f 5f       	subi	r17, 0xFF	; 255


void LCD_Floor_shift_left_stay_middle_B1(void)
{
		int shift = 0;
		for(shift = 0; shift<8; shift++)
 c68:	18 38       	cpi	r17, 0x88	; 136
 c6a:	59 f7       	brne	.-42     	; 0xc42 <LCD_Floor_shift_left_stay_middle_B1+0x4>
			LCD_string(0x80+shift, "B1"); // Start address is 0x80(0,0)
			_delay_ms(4000);
			LCD_initialize(); // 초기화		(초기화를 안하면 BBBBB1으로 글자가 남는다.)
			Switch();
	 	}	
}
 c6c:	1f 91       	pop	r17
 c6e:	08 95       	ret

00000c70 <LCD_Floor_shift_left_3>:
	 	}	
}

// 3층 shift로 표시
void LCD_Floor_shift_left_3(void)
{
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	c0 e0       	ldi	r28, 0x00	; 0
 c76:	d0 e0       	ldi	r29, 0x00	; 0

		int shift = 0;
		for(shift = 0; shift<16; shift++)
		{
			LCD_string(0x80+shift, "3"); // Start address is 0x80(0,0)
 c78:	9e 01       	movw	r18, r28
 c7a:	20 58       	subi	r18, 0x80	; 128
 c7c:	82 2f       	mov	r24, r18
 c7e:	61 e1       	ldi	r22, 0x11	; 17
 c80:	71 e0       	ldi	r23, 0x01	; 1
 c82:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
			if(shift==7)
 c86:	c7 30       	cpi	r28, 0x07	; 7
 c88:	d1 05       	cpc	r29, r1
 c8a:	51 f4       	brne	.+20     	; 0xca0 <LCD_Floor_shift_left_3+0x30>
 c8c:	8a e6       	ldi	r24, 0x6A	; 106
 c8e:	98 ec       	ldi	r25, 0xC8	; 200
 c90:	ab e7       	ldi	r26, 0x7B	; 123
 c92:	b2 e0       	ldi	r27, 0x02	; 2
 c94:	81 50       	subi	r24, 0x01	; 1
 c96:	90 40       	sbci	r25, 0x00	; 0
 c98:	a0 40       	sbci	r26, 0x00	; 0
 c9a:	b0 40       	sbci	r27, 0x00	; 0
 c9c:	d9 f7       	brne	.-10     	; 0xc94 <LCD_Floor_shift_left_3+0x24>
 c9e:	00 00       	nop
 ca0:	8f e3       	ldi	r24, 0x3F	; 63
 ca2:	9d e0       	ldi	r25, 0x0D	; 13
 ca4:	a3 e0       	ldi	r26, 0x03	; 3
 ca6:	81 50       	subi	r24, 0x01	; 1
 ca8:	90 40       	sbci	r25, 0x00	; 0
 caa:	a0 40       	sbci	r26, 0x00	; 0
 cac:	e1 f7       	brne	.-8      	; 0xca6 <LCD_Floor_shift_left_3+0x36>
 cae:	00 c0       	rjmp	.+0      	; 0xcb0 <LCD_Floor_shift_left_3+0x40>
 cb0:	00 00       	nop
			{
				_delay_ms(1000000);
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화			
 cb2:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
// 3층 shift로 표시
void LCD_Floor_shift_left_3(void)
{

		int shift = 0;
		for(shift = 0; shift<16; shift++)
 cb6:	21 96       	adiw	r28, 0x01	; 1
 cb8:	c0 31       	cpi	r28, 0x10	; 16
 cba:	d1 05       	cpc	r29, r1
 cbc:	e9 f6       	brne	.-70     	; 0xc78 <LCD_Floor_shift_left_3+0x8>
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화			
	 	}	

}
 cbe:	df 91       	pop	r29
 cc0:	cf 91       	pop	r28
 cc2:	08 95       	ret

00000cc4 <LCD_Floor_shift_left_2>:
	 	}	
}

// 2층 shift로 표시
void LCD_Floor_shift_left_2(void)
{
 cc4:	cf 93       	push	r28
 cc6:	df 93       	push	r29
 cc8:	c0 e0       	ldi	r28, 0x00	; 0
 cca:	d0 e0       	ldi	r29, 0x00	; 0

		int shift = 0;
		for(shift = 0; shift<16; shift++)
		{
			LCD_string(0x80+shift, "2"); // Start address is 0x80(0,0)
 ccc:	9e 01       	movw	r18, r28
 cce:	20 58       	subi	r18, 0x80	; 128
 cd0:	82 2f       	mov	r24, r18
 cd2:	63 e1       	ldi	r22, 0x13	; 19
 cd4:	71 e0       	ldi	r23, 0x01	; 1
 cd6:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
			if(shift==7)
 cda:	c7 30       	cpi	r28, 0x07	; 7
 cdc:	d1 05       	cpc	r29, r1
 cde:	51 f4       	brne	.+20     	; 0xcf4 <LCD_Floor_shift_left_2+0x30>
 ce0:	8a e6       	ldi	r24, 0x6A	; 106
 ce2:	98 ec       	ldi	r25, 0xC8	; 200
 ce4:	ab e7       	ldi	r26, 0x7B	; 123
 ce6:	b2 e0       	ldi	r27, 0x02	; 2
 ce8:	81 50       	subi	r24, 0x01	; 1
 cea:	90 40       	sbci	r25, 0x00	; 0
 cec:	a0 40       	sbci	r26, 0x00	; 0
 cee:	b0 40       	sbci	r27, 0x00	; 0
 cf0:	d9 f7       	brne	.-10     	; 0xce8 <LCD_Floor_shift_left_2+0x24>
 cf2:	00 00       	nop
 cf4:	8f e3       	ldi	r24, 0x3F	; 63
 cf6:	9d e0       	ldi	r25, 0x0D	; 13
 cf8:	a3 e0       	ldi	r26, 0x03	; 3
 cfa:	81 50       	subi	r24, 0x01	; 1
 cfc:	90 40       	sbci	r25, 0x00	; 0
 cfe:	a0 40       	sbci	r26, 0x00	; 0
 d00:	e1 f7       	brne	.-8      	; 0xcfa <LCD_Floor_shift_left_2+0x36>
 d02:	00 c0       	rjmp	.+0      	; 0xd04 <LCD_Floor_shift_left_2+0x40>
 d04:	00 00       	nop
			{
				_delay_ms(1000000);
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화			
 d06:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>
// 2층 shift로 표시
void LCD_Floor_shift_left_2(void)
{

		int shift = 0;
		for(shift = 0; shift<16; shift++)
 d0a:	21 96       	adiw	r28, 0x01	; 1
 d0c:	c0 31       	cpi	r28, 0x10	; 16
 d0e:	d1 05       	cpc	r29, r1
 d10:	e9 f6       	brne	.-70     	; 0xccc <LCD_Floor_shift_left_2+0x8>
				_delay_ms(1000000);
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화			
	 	}	
}
 d12:	df 91       	pop	r29
 d14:	cf 91       	pop	r28
 d16:	08 95       	ret

00000d18 <LCD_Floor_shift_left_1>:
	 	}	
}

// 1층 shift로 표시
void LCD_Floor_shift_left_1(void)
{
 d18:	cf 93       	push	r28
 d1a:	df 93       	push	r29
 d1c:	c0 e0       	ldi	r28, 0x00	; 0
 d1e:	d0 e0       	ldi	r29, 0x00	; 0
		int shift = 0;
		for(shift = 0; shift<16; shift++)
		{
			LCD_string(0x80+shift, "1"); // Start address is 0x80(0,0)
 d20:	9e 01       	movw	r18, r28
 d22:	20 58       	subi	r18, 0x80	; 128
 d24:	82 2f       	mov	r24, r18
 d26:	65 e1       	ldi	r22, 0x15	; 21
 d28:	71 e0       	ldi	r23, 0x01	; 1
 d2a:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
			if(shift==7)
 d2e:	c7 30       	cpi	r28, 0x07	; 7
 d30:	d1 05       	cpc	r29, r1
 d32:	51 f4       	brne	.+20     	; 0xd48 <LCD_Floor_shift_left_1+0x30>
 d34:	8a e6       	ldi	r24, 0x6A	; 106
 d36:	98 ec       	ldi	r25, 0xC8	; 200
 d38:	ab e7       	ldi	r26, 0x7B	; 123
 d3a:	b2 e0       	ldi	r27, 0x02	; 2
 d3c:	81 50       	subi	r24, 0x01	; 1
 d3e:	90 40       	sbci	r25, 0x00	; 0
 d40:	a0 40       	sbci	r26, 0x00	; 0
 d42:	b0 40       	sbci	r27, 0x00	; 0
 d44:	d9 f7       	brne	.-10     	; 0xd3c <LCD_Floor_shift_left_1+0x24>
 d46:	00 00       	nop
 d48:	8f e3       	ldi	r24, 0x3F	; 63
 d4a:	9d e0       	ldi	r25, 0x0D	; 13
 d4c:	a3 e0       	ldi	r26, 0x03	; 3
 d4e:	81 50       	subi	r24, 0x01	; 1
 d50:	90 40       	sbci	r25, 0x00	; 0
 d52:	a0 40       	sbci	r26, 0x00	; 0
 d54:	e1 f7       	brne	.-8      	; 0xd4e <LCD_Floor_shift_left_1+0x36>
 d56:	00 c0       	rjmp	.+0      	; 0xd58 <LCD_Floor_shift_left_1+0x40>
 d58:	00 00       	nop
			{
				_delay_ms(1000000);
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화			
 d5a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>

// 1층 shift로 표시
void LCD_Floor_shift_left_1(void)
{
		int shift = 0;
		for(shift = 0; shift<16; shift++)
 d5e:	21 96       	adiw	r28, 0x01	; 1
 d60:	c0 31       	cpi	r28, 0x10	; 16
 d62:	d1 05       	cpc	r29, r1
 d64:	e9 f6       	brne	.-70     	; 0xd20 <LCD_Floor_shift_left_1+0x8>
				_delay_ms(1000000);
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화			
	 	}	
}
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	08 95       	ret

00000d6c <LCD_Floor_shift_left_B1>:

// B1층 shift로 표시
void LCD_Floor_shift_left_B1(void)
{
 d6c:	cf 93       	push	r28
 d6e:	df 93       	push	r29
 d70:	c0 e0       	ldi	r28, 0x00	; 0
 d72:	d0 e0       	ldi	r29, 0x00	; 0
		int shift = 0;
		for(shift = 0; shift<16; shift++)
		{
			LCD_string(0x80+shift, "B1"); // Start address is 0x80(0,0)
 d74:	9e 01       	movw	r18, r28
 d76:	20 58       	subi	r18, 0x80	; 128
 d78:	82 2f       	mov	r24, r18
 d7a:	67 e1       	ldi	r22, 0x17	; 23
 d7c:	71 e0       	ldi	r23, 0x01	; 1
 d7e:	0e 94 20 01 	call	0x240	; 0x240 <LCD_string>
			if(shift==7)
 d82:	c7 30       	cpi	r28, 0x07	; 7
 d84:	d1 05       	cpc	r29, r1
 d86:	51 f4       	brne	.+20     	; 0xd9c <LCD_Floor_shift_left_B1+0x30>
 d88:	8a e6       	ldi	r24, 0x6A	; 106
 d8a:	98 ec       	ldi	r25, 0xC8	; 200
 d8c:	ab e7       	ldi	r26, 0x7B	; 123
 d8e:	b2 e0       	ldi	r27, 0x02	; 2
 d90:	81 50       	subi	r24, 0x01	; 1
 d92:	90 40       	sbci	r25, 0x00	; 0
 d94:	a0 40       	sbci	r26, 0x00	; 0
 d96:	b0 40       	sbci	r27, 0x00	; 0
 d98:	d9 f7       	brne	.-10     	; 0xd90 <LCD_Floor_shift_left_B1+0x24>
 d9a:	00 00       	nop
 d9c:	8f e3       	ldi	r24, 0x3F	; 63
 d9e:	9d e0       	ldi	r25, 0x0D	; 13
 da0:	a3 e0       	ldi	r26, 0x03	; 3
 da2:	81 50       	subi	r24, 0x01	; 1
 da4:	90 40       	sbci	r25, 0x00	; 0
 da6:	a0 40       	sbci	r26, 0x00	; 0
 da8:	e1 f7       	brne	.-8      	; 0xda2 <LCD_Floor_shift_left_B1+0x36>
 daa:	00 c0       	rjmp	.+0      	; 0xdac <LCD_Floor_shift_left_B1+0x40>
 dac:	00 00       	nop
			{
				_delay_ms(1000000);
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화		(초기화를 안하면 BBBBB1으로 글자가 남는다.)	
 dae:	0e 94 49 01 	call	0x292	; 0x292 <LCD_initialize>

// B1층 shift로 표시
void LCD_Floor_shift_left_B1(void)
{
		int shift = 0;
		for(shift = 0; shift<16; shift++)
 db2:	21 96       	adiw	r28, 0x01	; 1
 db4:	c0 31       	cpi	r28, 0x10	; 16
 db6:	d1 05       	cpc	r29, r1
 db8:	e9 f6       	brne	.-70     	; 0xd74 <LCD_Floor_shift_left_B1+0x8>
				_delay_ms(1000000);
			}
			_delay_ms(4000);
			LCD_initialize(); // 초기화		(초기화를 안하면 BBBBB1으로 글자가 남는다.)	
	 	}	
}
 dba:	df 91       	pop	r29
 dbc:	cf 91       	pop	r28
 dbe:	08 95       	ret

00000dc0 <_exit>:
 dc0:	f8 94       	cli

00000dc2 <__stop_program>:
 dc2:	ff cf       	rjmp	.-2      	; 0xdc2 <__stop_program>
